name: cd-upload-s3

on:
  workflow_call:
    secrets:
      AWS_ACCESS_KEY_ID:
        description: "AWS access key ID"
        required: true
      AWS_SECRET_ACCESS_KEY:
        description: "AWS secret access key"
        required: true

    inputs:
      runs-on:
        description: "Type of runner(s) to use (comma separated)"
        type: string
        required: false
        default: "ubuntu-latest"

      release-folder-name:
        description: "Name of the folder containing the release files (eg. 'publish' or 'dist')"
        type: string
        required: true

      build-artifact-name:
        description: "Name of the artifact (release files) to download"
        type: string
        required: true

      release-version:
        description: "Version of the release to upload (generated by release-drafter)"
        type: string
        required: true

      s3-bucket-name:
        description: "Name of the S3 bucket to upload to"
        type: string
        required: true

      s3-prefix:
        description: "Name of the S3 bucket prefix (subfolder) to upload to"
        type: string
        required: true

jobs:
  upload-release:
    runs-on: ${{ inputs.runs-on }}

    steps:
      # ********** Download Release file from Artifact & zip it **********
      - name: Download release artifact
        uses: actions/download-artifact@v3
        with:
          name: ${{ inputs.build-artifact-name }}
          path: ./download

      # ********** Upload to S3 **********
      - name: Configure AWS credentials from Test account
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: eu-central-1

      # Set shell:pwsh so that cmds below work on both Windows & Linux runners.
      # (NOTE: Windows runners can't access bash shell - "Access is denied.")

      # NOT NEEDED?? As release-drafter step above creates a new version even if no new changes are found.
      - name: Check if release version is already in S3
        shell: pwsh
        run: |
          echo "Release version: ${{ inputs.release-version }}"
          $releaseObjects = @(aws s3api list-objects-v2 --bucket "${{ inputs.s3-bucket-name }}" --prefix "${{ inputs.s3-prefix }}" --query "Contents[?contains(Key, '${{ inputs.release-version }}')].Key" --output text)
          echo "S3 Objects with release version: $releaseObjects"
          if ($releaseObjects) {
            throw "Release version already exists in S3."
          }

      - name: Remove '-latest' suffix from any S3 object name
        shell: pwsh
        run: |
          $latestObjectKeys = @(aws s3api list-objects-v2 --bucket "${{ inputs.s3-bucket-name }}" --prefix "${{ inputs.s3-prefix }}" --query 'Contents[?ends_with(Key, `-latest.zip`)].Key' --output text)
          echo "S3 Objects containing 'latest': $latestObjectKeys"
          if (-not [string]::IsNullOrEmpty($latestObjectKeys)) {
            $latestObjectKeys = $latestObjectKeys.Split()
            foreach ($object in $latestObjectKeys) {
              $newObjName = $object.Replace("${{ inputs.s3-prefix }}/","").Replace("-latest.zip",".zip")
              echo "Old object name: $object"
              echo "New object name: $newObjName"
              aws s3 mv "s3://${{ inputs.s3-bucket-name }}/$object" "s3://${{ inputs.s3-bucket-name }}/${{ inputs.s3-prefix }}/$newObjName"
            }
          } else {
            echo "No objects containing '-latest' found in S3 bucket."
          }

      - name: Upload new release zip to S3 (with '-latest' suffix)
        run: aws s3 cp "./download/${{ inputs.release-folder-name }}.zip" "s3://${{ inputs.s3-bucket-name }}/${{ inputs.s3-prefix }}/${{ inputs.release-version }}-latest.zip"
