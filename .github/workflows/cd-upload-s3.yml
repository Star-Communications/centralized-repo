name: cd-upload-s3

on:
  workflow_call:
    secrets:
      AWS_ACCESS_KEY_ID:
        description: "AWS access key ID"
        required: true
      AWS_SECRET_ACCESS_KEY:
        description: "AWS secret access key"
        required: true

    inputs:
      runs-on:
        description: "Type of runner(s) to use (comma separated)"
        type: string
        required: true
        default: "self-hosted"

      release-folder-name:
        description: "Name of the folder containing the release files (eg. 'publish' or 'dist')"
        type: string
        required: true

      artifact-name:
        description: "Name of the artifact (release files) to download"
        type: string
        required: true

      release-version:
        description: "Version of the release to upload (generated by release-drafter)"
        type: string
        required: true

      s3-bucket-name:
        description: "Name of the S3 bucket to upload to"
        type: string
        required: true

jobs:
  upload-release:
    runs-on: ${{ inputs.runs-on }}

    steps:
      # ********** Download Release file from Artifact & zip it **********
      - name: Download release artifact
        uses: actions/download-artifact@v3
        with:
          name: ${{ inputs.artifact-name }}
          path: ./download

      - name: Zip release folder
        shell: bash
        run: zip -r ./publish.zip ./download/${{ inputs.release-folder-name }}

      # ********** Upload to S3 **********
      - name: Configure AWS credentials from Test account
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: eu-central-1

      # NOT NEEDED?? As release-drafter step above creates a new version even if no new changes are found.
      - name: Check if release version is already in S3
        run: |
          releaseVersion=${{ inputs.release-version }}
          echo "Release version: $releaseVersion"
          releaseObjects=$(aws s3 ls "s3://${{ inputs.s3-bucket-name }}/" | awk "\$NF ~ /^$releaseVersion/ {print \$NF}")
          echo "S3 Objects with release version: $releaseObjects"
          if [ -n "$releaseObjects" ]; then
              echo "Release version already exists in S3. Exiting..."
              exit 1
          fi

      - name: Remove '-latest' suffix from any S3 object name
        run: |
          latestObjects=$(aws s3 ls "s3://${{ inputs.s3-bucket-name }}/" | grep -Eo "[^ ]*-latest\.zip")
          echo "S3 Objects with 'latest': $latestObjects"
          for object in $latestObjects; do
              oldObjName=$(echo $object | awk '{print $NF}')
              newObjName=${oldObjName/-latest.zip/.zip}
              echo "Old object name: $oldObjName"
              echo "New object name: $newObjName"
              aws s3 mv "s3://${{ inputs.s3-bucket-name }}/$oldObjName" "s3://${{ inputs.s3-bucket-name }}/$newObjName"
          done

      - name: Upload new release zip to S3 (with '-latest' suffix)
        run: aws s3 cp "./publish.zip" "s3://${{ inputs.s3-bucket-name }}/${{ inputs.release-version }}-latest.zip"
