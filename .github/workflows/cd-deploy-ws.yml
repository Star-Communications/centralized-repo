# Deploy Windows Service (publish)
name: cd-deploy-ws

on:
  workflow_call:
    secrets:
      AWS_ROLE_TO_ASSUME:
        description: "ARN of the AWS role to assume"
        required: true

    inputs:
      # TODO: check if runner label(s) exist in the org/repo
      runs-on:
        description: "The type of runner(s) to use (comma separated)"
        type: string
        required: true

      target-version:
        description: "Version to deploy (if not of latest)"
        type: string
        required: true

      s3-bucket:
        description: "Name of the S3 bucket to download from"
        type: string
        required: true

      s3-prefix:
        description: "Name of the S3 bucket prefix (subfolder) to upload to"
        type: string
        required: false
        default: ""

      windows-service-name:
        description: "Name of the Windows service to deploy"
        type: string
        required: true

      # if path to downloaded release is "C:\actions-runner\_work\MyProj\downloads\s3\my-proj\my-proj-v0.1.29-latest",
      # then "download-release.outputs.downloaded-name" = "my-proj-v0.1.29-latest"

env:
  # eg: C:/SC-TRACKER/INSTALLATION FILES/project_name/
  PROJECT_FOLDER_PATH: ""

jobs:
  log-inputs:
    runs-on: ${{ inputs.runs-on }}
    steps:
      - name: Log inputs & fail if runs-on='ubuntu-latest'
        shell: pwsh
        run: |
          echo "runs-on: ${{ inputs.runs-on }}"
          echo "target-version: ${{ inputs.target-version }}"
          echo "s3-bucket: ${{ inputs.s3-bucket }}"
          echo "s3-prefix: ${{ inputs.s3-prefix }}"
          echo "windows-service-name: ${{ inputs.windows-service-name }}"

          if ("${{ inputs.runs-on }}" -eq 'ubuntu-latest') {
            echo "This workflow is not intended to run on ubuntu-latest. Please use self-hosted runner label(s)."
            exit 1
          }

  download-release:
    needs: log-inputs
    uses: ./.github/workflows/download-s3.yml # use reuable workflow in the same repo
    with:
      runs-on: ${{ inputs.runs-on }}
      s3-bucket: ${{ inputs.s3-bucket }}
      s3-prefix: ${{ inputs.s3-prefix }}
      # <condition> && <true-value> || <false-value>
      s3-obj-filter: ${{ contains(inputs.target-version, 'latest') && ' ' || inputs.target-version }}
      download-path: "./downloads/s3" # download to a temporary path (cause project path is still unknown - will get it in the next job)
      unzip-file: true
    secrets:
      AWS_ROLE_TO_ASSUME: ${{ secrets.AWS_ROLE_TO_ASSUME }}
    # the job returns the following outputs:
    #   downloaded-name:

  deploy-ws:
    needs: download-release
    runs-on: ${{ inputs.runs-on }}

    defaults:
      run:
        shell: pwsh # use powershell as default shell for all steps

    steps:
      # ********** Log variables **********
      - name: Log 'download-release' step outputs
        run: |
          echo "downloaded-name: ${{ needs.download-release.outputs.downloaded-name }}"

      # ********** Get executable path of windows service **********
      - name: Get executable path of windows service
        id: get-exec-path
        continue-on-error: true # if service is not found, continue and create windows service later
        run: |
          $execPath=(Get-CimInstance -ClassName Win32_Service -Filter "Name='${{ inputs.windows-service-name }}'" | Select-Object -ExpandProperty PathName)

          # (eg.) execPath = "C:/SC-TRACKER/INSTALLATION FILES/project_name/publish/.exe"
          # (eg.) projPath = "C:/SC-TRACKER/INSTALLATION FILES/project_name"
          $projPath=($execPath | Split-Path -Parent | Split-Path -Parent)

          echo "Path of executable: '$execPath'"
          echo "Path of root folder: '$projPath'"

          if ($projPath) { echo "PROJECT_FOLDER_PATH=$projPath" >> $env:GITHUB_ENV }
          else { throw "Could not get Root Folder path of windows service '${{ inputs.windows-service-name }}'" }

      # ********** Move downloaded release to project folder **********
      - name: Delete docker-files folder from downloaded release
        run: |
          # delete docker-files folder (if it exists)
          if (Test-Path -Path "./downloads/s3/${{ needs.download-release.outputs.downloaded-name }}/docker-files") {
            Remove-Item -Path "./downloads/s3/${{ needs.download-release.outputs.downloaded-name }}/docker-files" -r -Force
          }

      - name: Move downloaded release to project folder
        run: |
          # STEP 1: Create destination folder if it doesn't exist
          if (!(Test-Path -Path "${{ env.PROJECT_FOLDER_PATH }}/releases")) {
              New-Item -ItemType Directory -Force -Path "${{ env.PROJECT_FOLDER_PATH }}/releases"
          }

          # STEP 2: Move downloaded release folder to destination folder (if not already there)
          if (!(Test-Path -Path "${{ env.PROJECT_FOLDER_PATH }}/releases/${{ needs.download-release.outputs.downloaded-name }}")) {
              Move-Item -Path "./downloads/s3/${{ needs.download-release.outputs.downloaded-name }}" -Destination "${{ env.PROJECT_FOLDER_PATH }}/releases/" -Force
          }

      # ********** Update windows serivce **********
      #   - name: Curl backup endpoint (to service Api)
      #     run: curl -X POST https://api.scout-camp.io/backup

      # Self-hosted runners requires elevated privileges to install and start services - cmd (as admin) run: "config "NAME_OF_YOUR_SERVICE" obj= "NT AUTHORITY\SYSTEM" type= own"

        # create windows service if it doesn't exist
      - name: Create windows service (if it doesn't exist)
        # run this step if 'get-exec-path' failed (ie. service doesn't exist)
        if: steps.get-exec-path.outcome == 'failure'
        run: SC CREATE "${{ inputs.windows-service-name }}" binPath= "${{ env.PROJECT_FOLDER_PATH }}/publish/${{ inputs.s3-prefix }}.exe" start= auto

      - name: Stop windows service
        run: if ((Get-Service "${{ inputs.windows-service-name }}").Status -eq "Running") { Stop-Service -Name "${{ inputs.windows-service-name }}" }

        # TODO: check system architecture (32 or 64 bits) and install the right version of the service
        # cmd: if ([System.Environment]::Is64BitOperatingSystem) { Write-Host "64-bit operating system" } else { Write-Host "32-bit operating system" }
      - name: Overwrite build folder (publish)
        run: Copy-Item -Path "${{ env.PROJECT_FOLDER_PATH }}/releases/${{ needs.download-release.outputs.downloaded-name }}/publish/*" -Destination "${{ env.PROJECT_FOLDER_PATH }}/publish" -r -Force

      - name: Overwrite appsettings file (if exists)
        run: if (Test-Path "${{ env.PROJECT_FOLDER_PATH }}/appsettings.json")
          { Copy-Item -Path "${{ env.PROJECT_FOLDER_PATH }}/appsettings.json" -Destination "${{ env.PROJECT_FOLDER_PATH }}/publish/appsettings.json" -Force }

      - name: Start windows service
        run: if ((Get-Service "${{ inputs.windows-service-name }}").Status -eq "Stopped") { Start-Service -Name "${{ inputs.windows-service-name }}" }

      - name: Clean up release folder (delete all releases except last 5)
        run: Get-ChildItem -Path "${{ env.PROJECT_FOLDER_PATH }}/releases" | Sort-Object -Property CreationTime -Descending | Select-Object -Skip 5 | Remove-Item -r -Force

    #   - name: Curl to MonitorHub to confirm version update succeeded or failed
    #     # ensure this step is executed even if the previous step fails.
    #     if: always()
    #     run: curl -X POST https://api.scout-camp.io/monitorhub
