name: ci-push-image

on:
  workflow_call:
    secrets:
      AWS_ROLE_TO_ASSUME:
        description: "ARN of the AWS role to assume"
        required: true

    inputs:
      runs-on:
        description: "The type of runner(s) to use (comma separated)"
        type: string
        default: "ubuntu-latest"
        required: true

      api-project-name:
        description: "Name of the API project to download from S3"
        type: string
        required: false

      spa-project-name:
        description: "Name of the SPA project to download from S3"
        type: string
        required: false

      project-bundle-name:
        description: "Name of the project bundle"
        type: string
        required: true

      container-registry-URL:
        description: "URL of the container registry"
        type: string
        required: true

# disable permissions for all scopes (except for id-token)
permissions:
  id-token: write

jobs:
  create-temp-folder:
    runs-on: ${{ inputs.runs-on }}

    defaults:
      run:
        shell: pwsh # use powershell as default shell for all steps

    steps:
      - name: Create or empty temporary folder
        run: |
          if (Test-Path -Path "TemporaryFolder") {
          Remove-Item -Path "TemporaryFolder" -Force -Recurse -ErrorAction SilentlyContinue
          }
          New-Item -ItemType Directory -Force -Path "TemporaryFolder" | Out-Null
          echo "Temporary folder created or emptied."

  download-api-release:
    needs: create-temp-folder

    uses: ./.github/workflows/download-s3.yml
    if: ${{ inputs.api-project-name != '' }}
    with:
      runs-on: ${{ inputs.runs-on }}
      s3-bucket: sc-releases-bucket
      s3-prefix: ${{ inputs.api-project-name }}
      download-path: "./TemporaryFolder"
      # unzip-file: true
    secrets:
      AWS_ROLE_TO_ASSUME: ${{ secrets.AWS_ROLE_TO_ASSUME }}
    # the job returns the following outputs:
    #   downloaded-name-job-output:

  download-spa-release:
    needs: create-temp-folder

    uses: ./.github/workflows/download-s3.yml
    if: ${{ inputs.spa-project-name != '' }}
    with:
      runs-on: ${{ inputs.runs-on }}
      s3-bucket: sc-releases-bucket
      s3-prefix: ${{ inputs.spa-project-name }}
      download-path: "./TemporaryFolder"
      # unzip-file: true
    secrets:
      AWS_ROLE_TO_ASSUME: ${{ secrets.AWS_ROLE_TO_ASSUME }}
    # the job returns the following outputs:
    #   downloaded-name-job-output:

  process-and-organize-files:
    needs: [download-api-release, download-spa-release]
    # run this job even if the previous jobs fail
    if: always()
    runs-on: ${{ inputs.runs-on }}

    defaults:
      run:
        shell: pwsh # use powershell as default shell for all steps

    outputs:
      api-version: ${{ steps.set-version.outputs.api-version }}
      cms-version: ${{ steps.set-version.outputs.cms-version }}

    steps:
      - name: Extract version information from file names
        id: set-version
        run: |
          echo "current folder : Current directory: $(pwd)"
          ls
          ls -l ./TemporaryFolder
          cd ./TemporaryFolder
          echo "Current directory: $(pwd)"
          echo "API project name: ${{ inputs.api-project-name }}"
          echo "SPA project name: ${{ inputs.spa-project-name }}"
          $api_version = (Get-ChildItem ${{ inputs.api-project-name }}-*.zip).Name -replace '${{ inputs.api-project-name }}-(.*)\.zip', '$1'
          $cms_version = (Get-ChildItem ${{ inputs.spa-project-name }}-*.zip).Name -replace '${{ inputs.spa-project-name }}-(.*)\.zip', '$1'
          echo "API version: $api_version"
          echo "CMS version: $cms_version"
          echo "api-version=$api_version" >> $env:GITHUB_OUTPUT
          echo "cms-version=$cms_version" >> $env:GITHUB_OUTPUT

      - name: Unzip API archive
        run: |
          cd ./TemporaryFolder
          if (Test-Path -Path ${{ inputs.api-project-name }}-*.zip) {
            Expand-Archive -Path ${{ inputs.api-project-name }}-*.zip -DestinationPath ${{ inputs.api-project-name }} -Force
            echo "API archive unzipped successfully."
          } else {
            echo "API archive not found. Skipping unzip step."
          }

      - name: Unzip CMS archive
        if: ${{ inputs.spa-project-name != '' }}
        run: |
          cd ./TemporaryFolder
          pwd
          if (Test-Path -Path ${{ inputs.spa-project-name }}-*.zip) {
            Expand-Archive -Path ${{ inputs.spa-project-name }}-*.zip -DestinationPath ${{ inputs.spa-project-name }} -Force
            echo "CMS archive unzipped successfully."
          } else {
            echo "CMS archive not found. Skipping unzip step."
          }

      - name: Move CMS dist folder into API publish folder & Dockerfile
        run: |
          cd ./TemporaryFolder
          pwd
          if (Test-Path -Path ${{ inputs.spa-project-name }}/dist) {
            echo "CMS dist folder found. Moving to API publish folder."
            mv ${{ inputs.spa-project-name }}/dist ${{ inputs.api-project-name }}/
          } else {
            echo "CMS dist folder not found. Skipping move step."
          }
          mv ${{ inputs.api-project-name }}/docker-files/Dockerfile.${{inputs.api-project-name}}.prod ${{ inputs.api-project-name }}/
          Remove-Item -Path ${{ inputs.api-project-name }}/docker-files -Force -Recurse -ErrorAction SilentlyContinue
          echo "Docker-files folder deleted."

      - name: Verify folder structure
        run: |
          tree ./TemporaryFolder

  # check-image-exists:
  #   needs: [download-api-release, download-spa-release]
  #   runs-on: ${{ inputs.runs-on }}

  #   outputs:
  #     image-exists: ${{ steps.check-image.outputs.image-exists }}

  #   steps:
  #     - name: Check if Docker image exists in GHCR
  #       id: check-image
  #       run: |
  #         $imageName = "${{ inputs.project-name }}:${{ needs.pre-deploy.outputs.latest-version }}"
  #         $imageExists = docker manifest inspect ${{ inputs.container-registry-URL }}/${{ github.repository_owner }}/${imageName} > $null 2>&1
  #         echo "image-exists=$($imageExists -eq $true)" >> $env:GITHUB_OUTPUT

  build-and-push-image:
    needs: [process-and-organize-files]
    if: always()
    runs-on: ${{ inputs.runs-on }}
    defaults:
      run:
        shell: pwsh # use powershell as default shell for all steps

    steps:
      - name: Build Docker image
        run: |
          cd ./TemporaryFolder/${{ inputs.api-project-name }}
          if ("${{ inputs.spa-project-name }}" -eq "") {
          $tag = "v-${{ inputs.api-project-name }}"
          } else {
          $tag = "api-${{ needs.process-and-organize-files.outputs.api-version }}_cms-${{ needs.process-and-organize-files.outputs.cms-version }}"}
          docker build -t ${{ inputs.container-registry-URL }}/${{ inputs.project-bundle-name }}:$tag --file Dockerfile.${{inputs.api-project-name}}.prod .

      - name: Push Docker image to local registry
        run: |
          if ("${{ inputs.spa-project-name }}" -eq "") {
          $tag = "v-${{ inputs.api-project-name }}"
          } else {
          $tag = "api-${{ needs.process-and-organize-files.outputs.api-version }}_cms-${{ needs.process-and-organize-files.outputs.cms-version }}"}
          docker push ${{ inputs.container-registry-URL }}/${{ inputs.project-bundle-name }}:$tag

  clean-up:
    needs: [build-and-push-image]
    if: always()
    runs-on: ${{ inputs.runs-on }}
    defaults:
      run:
        shell: pwsh # use powershell as default shell for all steps

    steps:
      - name: Clean up temporary folder
        run: |
          Remove-Item -Path "TemporaryFolder" -Force -Recurse -ErrorAction SilentlyContinue
          echo "Temporary folder cleaned up."
      #remove dangling images
