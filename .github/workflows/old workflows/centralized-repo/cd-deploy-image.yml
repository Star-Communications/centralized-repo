name: cd-deploy-image

on:
  workflow_call:
    inputs:
      runs-on:
        description: "The type of runner(s) to use (comma separated)"
        type: string
        required: true

      # linux-user:
      #   description: "Linux user to use for the project folder path"
      #   type: string
      #   required: true

      spa-project-version:
        description: "version of the SPA project to be deployed"
        type: string
        required: true

      api-project-version:
        description: "version of the API project to be deployed"
        type: string
        required: true

      project-bundle-name:
        description: "Name of the project bundle"
        type: string
        required: true

      container-registry-URL:
        description: "URL of the container registry"
        type: string
        required: true

# disable permissions for all scopes (except for id-token)
permissions:
  id-token: write

jobs:
  # pre-deploy:
  #   runs-on: ${{ inputs.runs-on }}

  #   outputs:
  #     project-folder-path: ${{ steps.set-output-vars.outputs.project-folder-path }}

  #   defaults:
  #     run:
  #       shell: pwsh # use powershell as default shell for all steps

  #   steps:
  #     - name: Set output variables for next job (depending on the runner's OS)
  #       id: set-output-vars
  #       run: |
  #         if ("${{ runner.os }}" -eq 'Linux') {
  #           $projFolderPath = "/home/${{ inputs.linux-user }}/STAR-COM/${{ inputs.project-bundle-name }}/${{ inputs.project-name }}"
  #         }
  #         else {
  #           $projFolderPath = "C:/STAR-COM/${{ inputs.project-bundle-name }}/${{ inputs.project-name }}"
  #         }

  #         echo "project-folder-path=$projFolderPath" >> $env:GITHUB_OUTPUT
  #         echo "projFolderPath = $projFolderPath"

  #     - name: Ensure folder structure exists (if not already)
  #       run: |
  #           $linuxPath = "/home/${{ inputs.linux-user }}/STAR-COM/${{ inputs.project-bundle-name }}/${{ inputs.project-name }}/installation-files"

  #           $windowsPath = "C:/STAR-COM/${{ inputs.project-bundle-name }}/${{ inputs.project-name }}/installation-files"

  #           if ("${{ runner.os }}" -eq 'Linux') {
  #             if (-Not (Test-Path $linuxPath)) {
  #               mkdir -p $linuxPath
  #             }
  #           }
  #           else {
  #             if (-Not (Test-Path $windowsPath)) {
  #               mkdir -p $windowsPath
  #             }
  #           }

  deploy-image:
    runs-on: ${{ inputs.runs-on }}

    steps:
      - name: deploy image to server
        run: |
          # Set the API project version
          $apiProjectVersion = "${{ inputs.api-project-version }}"
          echo "API project version: $apiProjectVersion"

          # Set the SPA project version
          $spaProjectVersion = "${{ inputs.spa-project-version }}"
          echo "SPA project version: $spaProjectVersion"

          # Deploy the image to the server (replace with your deployment command)
          echo "Deploying image to server..."
          docker run -d --name ${{inputs.project-bundle-name}} ${{ inputs.container-registry-URL }}/${{ inputs.project-bundle-name }}:${{ inputs.api-project-version }}-${{ inputs.spa-project-version }}
