# Download object from S3
name: download-s3

on:
  workflow_call:
    secrets:
      AWS_ROLE_TO_ASSUME:
        description: "ARN of the AWS role to assume"
        required: true

    inputs:
      runs-on:
        description: "The type of runner(s) to use (comma separated)"
        type: string
        required: true

      s3-bucket:
        description: "Name of the S3 bucket to download from"
        type: string
        required: true

      s3-prefix:
        description: "Name of the S3 bucket prefix (subfolder) to upload to"
        type: string
        required: false
        default: ""

      s3-obj-filter:
        description: "Filter for the S3 object name leave empty to get the last modified object"
        type: string
        required: false
        default: ""

      unzip-folder:
        description: "Unzip folder after download"
        type: boolean
        required: false
        default: true

env:
  DOWNLOADS_FOLDER_PATH: ""
  DOWNLOADED_NAME: ""

permissions:
  id-token: write # This is required for OIDC requesting the JWT

jobs:
  download-from-s3:
    runs-on: ${{ inputs.runs-on }}

    steps:
      # This job is not intended to run on ubuntu-latest. It downloads the s3 object on the runner's local machine for another job to use. When ununtu-latest the machine gets destroyed after the job is done.
      - name: Log runner label(s) & fail if 'ubuntu-latest'
        shell: pwsh
        run: |
          echo "runs-on: ${{ inputs.runs-on }}"
          if ('${{ inputs.runs-on }}' -eq 'ubuntu-latest') {
            echo "This workflow is not intended to run on ubuntu-latest. Please use self-hosted runner label(s)."
            exit 1
          }

      - name: Set DOWNLOADS_FOLDER_PATH env variable
        shell: pwsh
        run: |
          # STEP 1: Set downloadsFolderPath based on whether inputs.s3-prefix is '' or not
          if ('${{ inputs.s3-prefix }}' -eq '') {
            $downloadsFolderPath = "./downloads"
          }
          else {
            $downloadsFolderPath = "./downloads/${{ inputs.s3-prefix }}"
          }

          # STEP 2: set $downloadsFolderPath as an env variable (check OS to use appropriate syntax)
          if (${{ runner.os }} -eq 'Linux') {
              echo "DOWNLOADS_FOLDER_PATH=$downloadsFolderPath" >> $GITHUB_ENV
          }
          else {
              echo "DOWNLOADS_FOLDER_PATH=$downloadsFolderPath" >> $env:GITHUB_ENV
          }

      # ********** Download object from S3 **********
      - name: Configure AWS credentials
        id: configure-aws-credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_TO_ASSUME }}
          role-session-name: DownloadS3Object
          aws-region: eu-central-1

      - name: Get S3 object name (search by s3-obj-filter) & fail if it doesn't exists
        id: get-s3-object-name
        run: |
          # STEP 1: Get S3 object (remove bucket subfolder (prefix) from object name)
          $ObjName = (aws s3api list-objects-v2 --bucket "${{ inputs.s3-bucket }}" --prefix "${{ inputs.s3-prefix }}" --query "reverse(sort_by(Contents[?contains(Key, '${{ inputs.s3-obj-filter}}.zip')], &LastModified))[0].Key" --output text).replace("${{ inputs.s3-prefix }}/", "")
          echo "Object name in S3: $ObjName"
          # STEP 2: throw an error if $ObjName has no value
          if (!$ObjName) {
            throw "Object not found in S3. Invalid s3-obj-filter."
          }
          # STEP 3: set $ObjName as an env variable (check os to use appropriate syntax)
          if (${{ runner.os }} -eq 'Linux') {
              echo "obj-name=$ObjName" >> $GITHUB_OUTPUT
          }
          else {
              echo "obj-name=$ObjName" >> $env:GITHUB_OUTPUT
          }

      - name: Download object from S3 # (if object doesn't exists locally (as a directory or file))
        shell: pwsh
        # @() in an array operator - is used to force the output into an array
        run: |
          # STEP 1: Check if downloaded object exists locally (as a directory or file)

          # STEP 1.a: Get all directories in the downloads folder (as array)
          $dirs = @(Get-ChildItem -Path "${{ env.DOWNLOADS_FOLDER_PATH }}/" -Directory)

          # STEP 1.b: Get all files (to get zipped files) in the downloads folder (as array)
          $files = @(Get-ChildItem -Path "${{ env.DOWNLOADS_FOLDER_PATH }}/" -File)

          # STEP 1.c: Concatenate the arrays & filter result by object name 
          # filtering with or without .zip ext, in case the object got unzipped after download.
          $filtered = $dirs + $files | Where-Object { $_.Name -eq '${{ steps.get-s3-object-name.outputs.obj-name }}' -or $_.Name -eq '${{ steps.get-s3-object-name.outputs.obj-name }}.zip' }

          # STEP 2: Download the object if it doesn't exist locally
          if(!($filtered))
          {
            aws s3 cp "s3://${{ inputs.s3-bucket }}/${{ inputs.s3-prefix }}/${{ steps.get-s3-object-name.outputs.obj-name }}" "${{ env.DOWNLOADS_FOLDER_PATH }}/${{ steps.get-s3-object-name.outputs.obj-name }}" 
          }

      - name: Unzip downloaded object file
        if: ${{ inputs.unzip-folder }}
        run: |
          # STEP 1: Check if downloaded object exists and is a zip file
          $objPath = "${{ env.DOWNLOADS_FOLDER_PATH }}/${{ steps.get-s3-object-name.outputs.obj-name }}"
          $objName = "${{ steps.get-s3-object-name.outputs.obj-name }}"
          if((Test-Path "$objPath") -and (Get-Item "$objPath").Extension -eq ".zip")
          {
            # STEP 2: Unzip the object
            Expand-Archive -Path "$objPath" -DestinationPath "$objPath".replace(".zip", "")
            # STEP 3: Remove the zip file
            Remove-Item "$objPath"
            # STEP 4: Remove ".zip" from the object name
            $objName = $objName.replace(".zip", "")
          }
          # STEP 5: Set $objName as an env variable (check os to use appropriate syntax)
          if (${{ runner.os }} -eq 'Linux') {
            echo "DOWNLOADED_NAME=$objName" >> $GITHUB_OUTPUT
          }
          else {
            echo "DOWNLOADED_NAME=$objName" >> $env:GITHUB_OUTPUT
          }

    # Set job output to be used in next job
    outputs:
      downloads-folder-path: ${{ env.DOWNLOADS_FOLDER_PATH }}
      downloaded-name: ${{ env.DOWNLOADED_NAME }} # name of the downloaded file or folder (if unzipped).
