# Download object from S3
name: download-s3

on:
  workflow_call:
    secrets:
      AWS_ROLE_TO_ASSUME:
        description: "ARN of the AWS role to assume"
        required: true

    inputs:
      runs-on:
        description: "The type of runner(s) to use (comma separated)"
        type: string
        required: true

      s3-bucket:
        description: "Name of the S3 bucket to download from"
        type: string
        required: true

      s3-prefix:
        description: "Name of the S3 bucket prefix (subfolder) to upload to"
        type: string
        required: false
        default: ""

      s3-obj-filter:
        description: "Filter for the S3 object name leave empty to get the last modified object"
        type: string
        required: false
        default: ""

      download-path:
        description: "The path to download the object to"
        type: string
        required: true

      unzip-file:
        description: "Unzip downloaded S3 object file"
        type: boolean
        required: false
        default: false

    outputs:
      downloaded-name:
        description: "The name of the downloaded file or folder (if unzipped)"
        value: ${{ jobs.download-from-s3.outputs.output1 }}

jobs:
  download-from-s3:
    runs-on: ${{ inputs.runs-on }}

    defaults:
      run:
        shell: pwsh # use powershell as default shell for all steps

    outputs:
      output1: ${{ steps.unzip-file-id.outputs.downloaded-name }}

    steps:
      # This job is not intended to run on ubuntu-latest. It downloads the s3 object on the runner's local machine for another job to use. When ununtu-latest the machine gets destroyed after the job is done.
      - name: Log runner label(s) & fail if 'ubuntu-latest'
        run: |
          echo "runs-on: ${{ inputs.runs-on }}"
          if ("${{ inputs.runs-on }}" -eq 'ubuntu-latest') {
            echo "This workflow is not intended to run on ubuntu-latest. Please use self-hosted runner label(s)."
            exit 1
          }

      # ********** Download object from S3 **********
      - name: Configure AWS credentials
        id: configure-aws-credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_TO_ASSUME }}
          role-session-name: DownloadS3Object
          aws-region: eu-central-1

      - name: Get S3 object name (search by s3-obj-filter) & fail if it doesn't exists
        id: get-s3-object-name
        run: |
          # STEP 1: Trim the 's3-obj-filter' input (in case it has spaces)
          $s3ObjFilter = "${{ inputs.s3-obj-filter }}".Trim()

          # STEP 2: Get S3 object order by last-modified reverse (& remove bucket subfolder (prefix) from object name)
          $ObjName = (aws s3api list-objects-v2 --bucket "${{ inputs.s3-bucket }}" --prefix "${{ inputs.s3-prefix }}" --query "reverse(sort_by(Contents[?contains(Key, '$s3ObjFilter')], &LastModified))[0].Key" --output text)
          echo "Object name in S3: '$ObjName'"

          # STEP 3: throw an error if $ObjName has no value
          if (!$ObjName -or ($ObjName -eq 'None')) {
            throw "Object not found in S3. Invalid s3-obj-filter: '${{ inputs.s3-obj-filter}}'."
          }

          # STEP 4: remove prefix from object name
          $ObjName = $ObjName.replace("${{ inputs.s3-prefix }}/", "")
          echo "Object name after removing prefix: '$ObjName'"

          # STEP 5: set $ObjName as an env variable (check OS to use appropriate syntax)
          if ("${{ runner.os }}" -eq 'Linux') {
            echo "obj-name=$ObjName" >> $GITHUB_OUTPUT
          }
          else {
            echo "obj-name=$ObjName" >> $env:GITHUB_OUTPUT
          }

      - name: Check & create 'download-path' (if it doesn't exist)
        run: |
          # STEP 1: If 'download-path' does NOT exist, then create it & exit (no need to continue).
          if(!(Test-Path -Path "${{ inputs.download-path }}")) {
              New-Item -ItemType Directory -Force -Path "${{ inputs.download-path }}"
              echo "Download path '${{ inputs.download-path }}' doesn't exist. Created it."
              exit 0
          }

          echo "Download path '${{ inputs.download-path }}' exists."

      # This step is unnecessary (as we move the file later on to the project folder)
      - name: Check if S3 object already exists locally # (as a directory or file)
        continue-on-error: true
        id: check-if-object-exists
        run: |
          # STEP 1: Get all directories in the 'download-path' (as array) (only if 'unzip-file'=true, cause then unzipped S3 object could be a directory)
          if("${{ inputs.unzip-file }}" -eq "true") {
            $dirs = @(Get-ChildItem -Path "${{ inputs.download-path }}/" -Directory)
          }

          # STEP 2: Get all files (to get zipped files) in the 'download-path' (as array)
          $files = @(Get-ChildItem -Path "${{ inputs.download-path }}/" -File)

          # STEP 3: Concatenate the arrays & filter result by object name
          $objName = "${{ steps.get-s3-object-name.outputs.obj-name }}".replace('.zip', '')

          # filtering with or without .zip ext, in case the object got unzipped after download.
          $filtered = $dirs + $files | Where-Object { $_.Name -eq "$objName" -or $_.Name -eq "$objName.zip" }

          # STEP 4: throw an error if $filtered has a value
          if ($filtered) {
            throw "Object '$objName' already exists locally. Skipping download."
          }

          echo "Object '$objName' doesn't exist locally."

      - name: Download object from S3 # (if object doesn't exists locally (as a directory or file))
        if: steps.check-if-object-exists.outcome == 'success'
        # @() in an array operator - is used to force the output into an array
        run: aws s3 cp "s3://${{ inputs.s3-bucket }}/${{ inputs.s3-prefix }}/${{ steps.get-s3-object-name.outputs.obj-name }}" "${{ inputs.download-path }}/${{ steps.get-s3-object-name.outputs.obj-name }}"

      - name: Unzip downloaded object file & set 'obj-name' output variable
        id: unzip-file-id
        run: |
          # STEP 1: Check if downloaded object exists and is a zip file
          $objPath = "${{ inputs.download-path }}/${{ steps.get-s3-object-name.outputs.obj-name }}"
          $objName = "${{ steps.get-s3-object-name.outputs.obj-name }}"
          if(("${{ inputs.unzip-file }}" -eq "true") -and (Test-Path "$objPath") -and (Get-Item "$objPath").Extension -eq ".zip")
          {
            # STEP 2: Unzip the downloaded object to a folder with same object name (use -Force to overwrite existing files)
            Expand-Archive -Path "$objPath" -DestinationPath "$objPath".replace(".zip", "") -Force
            echo "Object '$objName' unzipped successfully."
            
            # STEP 3: Remove the zip file
            Remove-Item "$objPath"
            echo "Object '$objName' zip file removed successfully."

            # STEP 4: If unzipped dir contains only one dir (with same name), move child dir to parent dir (overwrite)
            # so instead of "unzippedDir/unzippedDir/my-files" will have "unzippedDir/my-files"
            $childItemCount = (Get-ChildItem -Path "$objPath".replace(".zip", "") -Force | Measure-Object -Property Name).Count
            $childDir = (Get-ChildItem -Path "$objPath".replace(".zip", "") -Directory | Select-Object -First 1).Name

            if($childItemCount -eq 1 -and $childDir -eq $objName.replace(".zip", "")) {
                echo "Object '$objName' contains only one child dir. Moving child dir to parent dir..."

                $parentDirPath = "$objPath".replace(".zip", "")
                # STEP 4.a: Rename parent dir
                Rename-Item -Path "$parentDirPath" -NewName "$objName _old"

                # STEP 4.b: Move child dir to parent dir
                Move-Item -Path "$parentDirPath _old/$childDir" -Destination (Split-Path -Path "$parentDirPath" -Parent) -Force

                # STEP 4.c: Delete old parent dir
                Remove-Item -Path "$parentDirPath _old" -Force -r

                echo "Object '$objName' child dir moved to parent dir successfully."
            }
          }
          else {
            echo "Object '$objName' doesn't exist locally or is not a zip file. Skipping unzip."
          }

          # STEP 5: Remove ".zip" from the object name
          if ("${{ inputs.unzip-file }}" -eq "true") { $objName = "$objName".replace(".zip", "") }

          # STEP 6: Set $objName as an env variable (check OS to use appropriate syntax)
          if ("${{ runner.os }}" -eq 'Linux') {
            echo "downloaded-name=$objName" >> $GITHUB_OUTPUT
          }
          else {
            echo "downloaded-name=$objName" >> $env:GITHUB_OUTPUT
          }

          echo "downloaded-name= '$objName'"
