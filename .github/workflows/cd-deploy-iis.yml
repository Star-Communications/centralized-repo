# Deploy .NET api (publish) as iis website application
name: cd-deploy-publish-iis-application

on:
  workflow_call:
    secrets:
      AWS_ROLE_TO_ASSUME:
        description: "ARN of the AWS role to assume"
        required: true

    inputs:
      # TODO: check if runner label(s) exist in the org/repo
      runs-on:
        description: "The type of runner(s) to use (comma separated)"
        type: string
        required: true

      target-version:
        description: "Version to deploy (if not of latest)"
        type: string
        required: true

      s3-bucket:
        description: "Name of the S3 bucket to download from"
        type: string
        required: true

      s3-prefix:
        description: "Name of the S3 bucket prefix (subfolder) to upload to"
        type: string
        required: false
        default: ""

      iis-website-name:
        description: "Name of the IIS Website to deploy"
        type: string
        required: true

      iis-application-name:
        description: "Name of the IIS Website Application to deploy"
        type: string
        required: false
        default: ""

      # if path to downloaded release is "C:\actions-runner\_work\MyProj\downloads\s3\my-proj\my-proj-v0.1.29-latest",
      # then "download-release.outputs.downloaded-name-job-output" = "my-proj-v0.1.29-latest"

# disable permissions for all scopes (except for id-token)
permissions:
  id-token: write # this is required for OIDC requesting the JWT

env:
  # eg: C:/SC-TRACKER/INSTALLATION FILES/project_name/
  PROJECT_FOLDER_PATH: ""

jobs:
  download-release:
    uses: ./.github/workflows/download-s3.yml # use reuable workflow in the same repo
    with:
      runs-on: ${{ inputs.runs-on }}
      s3-bucket: ${{ inputs.s3-bucket }}
      s3-prefix: ${{ inputs.s3-prefix }}
      # <condition> && <true-value> || <false-value>
      s3-obj-filter: ${{ contains(inputs.target-version, 'latest') && ' ' || inputs.target-version }}
      download-path: "./downloads/s3" # download to a temporary path (cause project path is still unknown - will get it in the next job)
      unzip-file: true
    secrets:
      AWS_ROLE_TO_ASSUME: ${{ secrets.AWS_ROLE_TO_ASSUME }}
    # the job returns the following outputs:
    #   downloaded-name-job-output:

  deploy-publish-iis-application:
    runs-on: ${{ inputs.runs-on }}

    needs: download-release

    defaults:
      run:
        shell: pwsh # use powershell as default shell for all steps

    steps:
      # ********** Log variables **********
      - name: Log 'download-release' step outputs
        run: |
          echo "downloaded-name-job-output: ${{ needs.download-release.outputs.downloaded-name-job-output }}"

      # ********** Get physical path **********
      - name: Get physical path of iis website # this step is for SPAs
        run: |
          # STEP 1: Import needed for 'Get-WebSite' cmdlet  
          Import-Module -Name WebAdministration

          # STEP 2: Get physical path of iis website
          $siteName = '${{ inputs.iis-website-name }}'
          $appName = '${{ inputs.iis-application-name }}'

          if ($appName) { 
            echo "Set physical path of '$appName' application in '$siteName' website"
            $physicalPath = (Get-WebApplication -Site $siteName -Name $appName).PhysicalPath
          }
          else { 
            echo "Set physical path of '$siteName' website"
            $physicalPath = (Get-WebSite -Name $siteName).PhysicalPath 
          }

          # STEP 3: Get path of root folder
          # (eg.) physicalPath = "C:/SC-TRACKER/INSTALLATION FILES/project_name/publishORdist/"
          # (eg.) projPath = "C:/SC-TRACKER/INSTALLATION FILES/project_name"
          $projPath=($physicalPath | Split-Path -Parent )
            
          echo "Physical path of '$siteName' website is: '$physicalPath'"
          echo "Path of root folder: $projPath"

          # STEP 4: Set 'PROJECT_FOLDER_PATH' env variable
          if ($projPath) { echo "PROJECT_FOLDER_PATH=$projPath" >> $env:GITHUB_ENV }
          else { throw "Could not get Root Folder path of IIS website/application" }

      # ********** Move downloaded release to project folder **********
      - name: Delete docker-files folder from downloaded release
        run: |
          # delete docker-files folder (if it exists)
          if (Test-Path -Path "./downloads/s3/${{ needs.download-release.outputs.downloaded-name-job-output }}/docker-files") {
            Remove-Item -Path "./downloads/s3/${{ needs.download-release.outputs.downloaded-name-job-output }}/docker-files" -r -Force
          }

      - name: Move downloaded release to project folder
        run: |
          # STEP 1: Create destination folder if it doesn't exist
          if (!(Test-Path -Path "${{ env.PROJECT_FOLDER_PATH }}/releases")) {
            echo "Releases folder not found. Creating it."
            New-Item -ItemType Directory -Force -Path "${{ env.PROJECT_FOLDER_PATH }}/releases"
          }

          # STEP 2: Move downloaded release folder to destination folder (if not already there)
          if (!(Test-Path -Path "${{ env.PROJECT_FOLDER_PATH }}/releases/${{ needs.download-release.outputs.downloaded-name-job-output }}")) {
            echo "Moving downloaded release to releases folder."
            Move-Item -Path "./downloads/s3/${{ needs.download-release.outputs.downloaded-name-job-output }}" -Destination "${{ env.PROJECT_FOLDER_PATH }}/releases/" -Force
          }

      # ********** Update iis website (application) **********
      #   - name: Curl backup endpoint (to service Api)
      #     run: curl -X POST https://api.scout-camp.io/backup

      # Self-hosted runners requires elevated privileges to install and start services - cmd (as admin) run: "config "NAME_OF_YOUR_SERVICE" obj= "NT AUTHORITY\SYSTEM" type= own"
      - name: Stop iis website # no need to check if it's already stopped (doesn't throw error)
        run: |
          # Import needed for 'Stop-WebSite' cmdlet  
          Import-Module -Name WebAdministration

          $siteStatus=(Get-Website -Name "${{ inputs.iis-website-name }}" | Select-Object -ExpandProperty State)

          if ($siteStatus -eq "Started") {
            echo "Stopping '${{ inputs.iis-website-name }}' website"

            Stop-WebAppPool -Name "${{ inputs.iis-website-name }}"
            Stop-WebSite -Name "${{ inputs.iis-website-name }}"
          }
          else { echo "Website '${{ inputs.iis-website-name }}' is already stopped" }

          # (cmd): %systemroot%\System32\inetsrv\appcmd stop apppool /apppool.name:"SC-Tracker"
          # (cmd): %systemroot%\System32\inetsrv\appcmd stop site /site.name:"SC-Tracker"

          # stop the "World Wide Web Publishing Service" to stop iis service 
          if ((Get-Service "w3svc").Status -eq "Running") { Stop-Service -Name "w3svc" } 
          # sc stop w3svc

      - name: Overwrite build folder (dist)
        # run if 'iis-application-name' is not empty
        if: inputs.iis-application-name == ''
        run: Copy-Item -Path "${{ env.PROJECT_FOLDER_PATH }}/releases/${{ needs.download-release.outputs.downloaded-name-job-output }}/dist/*" -Destination "${{ env.PROJECT_FOLDER_PATH }}/dist" -r -Force

        # TODO: check system architecture (32 or 64 bits) and install the right version of the service
        # cmd: if ([System.Environment]::Is64BitOperatingSystem) { Write-Host "64-bit operating system" } else { Write-Host "32-bit operating system" }
      - name: Overwrite build folder (publish)
        if: inputs.iis-application-name != ''
        run: Copy-Item -Path "${{ env.PROJECT_FOLDER_PATH }}/releases/${{ needs.download-release.outputs.downloaded-name-job-output }}/publish/*" -Destination "${{ env.PROJECT_FOLDER_PATH }}/publish" -r -Force

      - name: Overwrite appsettings file (if exists)
        if: inputs.iis-application-name != ''
        run: if (Test-Path "${{ env.PROJECT_FOLDER_PATH }}/appsettings.json")
          { Copy-Item -Path "${{ env.PROJECT_FOLDER_PATH }}/appsettings.json" -Destination "${{ env.PROJECT_FOLDER_PATH }}/publish/appsettings.json" -Force }

      - name: Start iis website
        run: |
          # Import needed for 'Start-WebSite' cmdlet  
          Import-Module -Name WebAdministration

          Start-WebAppPool -Name "${{ inputs.iis-website-name }}"
          Start-WebSite -Name "${{ inputs.iis-website-name }}"

          # start the "World Wide Web Publishing Service" to start iis service
          Start-Service -Name "w3svc"
          # sc start w3svc

      - name: Clean up release folder (delete all releases except last 5)
        run: Get-ChildItem -Path "${{ env.PROJECT_FOLDER_PATH }}/releases" | Sort-Object -Property CreationTime -Descending | Select-Object -Skip 5 | Remove-Item -r -Force

    #   - name: Curl to MonitorHub to confirm version update succeeded or failed
    #     # ensure this step is executed even if the previous step fails.
    #     if: always()
    #     run: curl -X POST https://api.scout-camp.io/monitorhub
