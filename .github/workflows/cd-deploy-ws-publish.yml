# CD - Deploy Windows Service (publish)
name: cd-deploy-ws-publish

on:
  workflow_call:
    inputs:
      # TODO: check if runner label(s) exist in the org/repo
      runs-on:
        description: "The type of runner(s) to use (comma separated)"
        type: string
        required: true

      root-folder-path:
        description: "Name of the root folder containing all software files (eg. releases, exec, logs...)"
        type: string
        # not required cause we can get it by getting the executable path of the windows service
        required: false
        default: ""

      project-name:
        description: "Name of the project (eg. 'project_name')"
        type: string
        required: true

      windows-service-name:
        description: "Name of the Windows service to deploy"
        type: string
        required: true

      # if path to downloaded release in "C:\actions-runner\_work\MyProj\downloads\my-proj\my-proj-v0.1.29-latest",
      # then "downloaded-release-path" = "C:\actions-runner\_work\MyProj\downloads\my-proj"
      # and "downloaded-release-folder" = "my-proj-v0.1.29-latest"
      downloaded-release-path:
        description: "Path in local machine of the downloaded release folder."
        type: string
        required: true

      downloaded-release-folder:
        description: "Name of the downloaded release folder."
        type: string
        required: true

      env-file-name:
        description: "Name of the environment file (eg. 'appsettings.json' or 'appsettings.docker.json')"
        type: string
        required: true

env:
  ROOT_FOLDER_PATH: "${{ inputs.root-folder-path }}"

jobs:
  deploy-ws-publish:
    runs-on: ${{ inputs.runs-on }}

    steps:
      - name: Log runner label(s) & fail if 'ubuntu-latest'
        shell: pwsh
        run: |
          echo "runs-on: ${{ inputs.runs-on }}"
          if ("${{ inputs.runs-on }}" -eq 'ubuntu-latest') {
            echo "This workflow is not intended to run on ubuntu-latest. Please use self-hosted runner label(s)."
            exit 1
          }

      # ********** Get executable path of windows service **********
      - name: Get executable path of windows service
        run: |
          $execPath=(Get-CimInstance -ClassName Win32_Service -Filter "Name='${{ inputs.windows-service-name }}'" | Select-Object -ExpandProperty PathName)
          # (for example) execPath = "RootFolder/INSTALLATION FILES/project_name/publish/.exe"
          $rootPath=($execPath | Split-Path -Parent | Split-Path -Parent | Split-Path -Parent | Split-Path -Parent)
          echo "Path of executable: $execPath"
          echo "Path of root folder: $rootPath"
          if ($rootPath) { echo "ROOT_FOLDER_PATH=$rootPath" >> $env:GITHUB_ENV }
          else { throw "Could not get Root Folder path" }

      # ********** Copy downloaded release to project folder **********
      - name: Move downloaded release to project folder
        run: |
          $destinationPath="${{ env.ROOT_FOLDER_PATH }}/INSTALLATION FILES/${{ inputs.project-name }}/releases"

          # STEP 1: Create destination folder if it doesn't exist
          if (!(Test-Path -Path $destinationPath)) {
              New-Item -ItemType Directory -Force -Path $destinationPath
          }

          # STEP 2: Move downloaded release folder to destination folder
          Move-Item -Path "${{ inputs.downloaded-release-path }}/${{ inputs.downloaded-release-folder }}" -Destination "$destinationPath/" -Force

      # ********** Update windows serivce **********
      #   - name: Curl backup endpoint (to service Api)
      #     run: curl -X POST https://api.scout-camp.io/backup

      # Self-hosted runners requires elevated privileges to install and start services - cmd (as admin) run: "config "NAME_OF_YOUR_SERVICE" obj= "NT AUTHORITY\SYSTEM" type= own"
      - name: Stop windows service
        run: if ((Get-Service "${{ inputs.windows-service-name }}").Status -eq "Running") { Stop-Service -Name "${{ inputs.windows-service-name }}" }

      # TODO: check system architecture (32 or 64 bits) and install the right version of the service
      # cmd: if ([System.Environment]::Is64BitOperatingSystem) { Write-Host "64-bit operating system" } else { Write-Host "32-bit operating system" }
      - name: Overwrite new release build folder to existing build folder
        run: Copy-Item -Path "${{ env.ROOT_FOLDER_PATH }}/INSTALLATION FILES/${{ inputs.project-name }}/releases/${{ inputs.downloaded-release-folder }}/publish/*" -Destination "${{ env.ROOT_FOLDER_PATH }}/INSTALLATION FILES/${{ inputs.project-name }}/publish" -Recurse -Force

      - name: Overwrite env file (if it exists)
        run: if (Test-Path "${{ env.ROOT_FOLDER_PATH }}/INSTALLATION FILES/${{ inputs.project-name }}/${{ inputs.env-file-name}}")
          { Copy-Item -Path "${{ env.ROOT_FOLDER_PATH }}/INSTALLATION FILES/${{ inputs.project-name }}/${{ inputs.env-file-name}}" -Destination "${{ env.ROOT_FOLDER_PATH }}/INSTALLATION FILES/${{ inputs.project-name }}/publish/${{ inputs.env-file-name}}" -Force }

      - name: Start windows service
        run: if ((Get-Service "${{ inputs.windows-service-name }}").Status -eq "Stopped") { Start-Service -Name "${{ inputs.windows-service-name }}" }

      - name: Clean up release folder (delete all releases except last 5)
        run: Get-ChildItem -Path "${{ env.ROOT_FOLDER_PATH }}/INSTALLATION FILES/${{ inputs.project-name }}/releases" | Sort-Object -Property CreationTime -Descending | Select-Object -Skip 5 | Remove-Item -Recurse -Force

    #   - name: Curl to MonitorHub to confirm version update succeeded or failed
    #     # ensure this step is executed even if the previous step fails.
    #     if: always()
    #     run: curl -X POST https://api.scout-camp.io/monitorhub
