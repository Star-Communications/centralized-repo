name: cd-deploy-container

on:
  workflow_call:
    secrets:
      AWS_ROLE_TO_ASSUME:
        description: "ARN of the AWS role to assume"
        required: true

    inputs:
      # TODO: check if runner label(s) exist in the org/repo
      runs-on:
        description: "The type of runner(s) to use (comma separated)"
        type: string
        required: true

      target-version:
        description: "Version to deploy (if not of latest)"
        type: string
        required: true

      s3-bucket:
        description: "Name of the S3 bucket to download from"
        type: string
        required: true

      s3-prefix:
        description: "Name of the S3 bucket prefix (subfolder) to upload to"
        type: string
        required: false
        default: ""

      project-folder-path:
        # eg: (C: OR /home/ubuntu)/SC-TRACKER/INSTALLATION FILES/tracker-mw
        description: "Path to the project folder (where the 'docker-files' folder is)"
        type: string
        required: true

      docker-compose-file-name:
        description: "Name of the docker-compose to use."
        type: string
        required: true

      # if path to downloaded release is "C:\actions-runner\_work\MyProj\downloads\s3\my-proj\my-proj-v0.1.29-latest",
      # then "download-release.outputs.downloaded-name-job-output" = "my-proj-v0.1.29-latest"

# disable permissions for all scopes (except for id-token)
permissions:
  id-token: write # this is required for OIDC requesting the JWT

jobs:
  download-release:
    uses: ./.github/workflows/download-s3.yml
    with:
      runs-on: ${{ inputs.runs-on }}
      s3-bucket: ${{ inputs.s3-bucket }}
      s3-prefix: ${{ inputs.s3-prefix }}
      # <condition> && <true-value> || <false-value>
      s3-obj-filter: ${{ contains(inputs.target-version, 'latest') && ' ' || inputs.target-version }}
      download-path: "${{ inputs.project-folder-path }}/releases"
      unzip-file: true
    secrets:
      AWS_ROLE_TO_ASSUME: ${{ secrets.AWS_ROLE_TO_ASSUME }}
    # the job returns the following outputs:
    #   downloaded-name-job-output:

  deploy-container:
    runs-on: ${{ inputs.runs-on }}
    
    needs: download-release

    defaults:
      run:
        shell: pwsh # use powershell as default shell for all steps

    steps:
      - name: Log 'download-release' job output
        run: |
          echo "downloaded-name-job-output: ${{ needs.download-release.outputs.downloaded-name-job-output }}"


      # ********** Build new image & run new container **********

      - name: Stop existing container(s)
        run: docker compose --file "${{ inputs.project-folder-path}}/installation-files/docker-files/${{ inputs.docker-compose-file-name }}" down
        # 'continue-on-error' in case of first time installation & there are no 'docker-files' yet
        continue-on-error: true

      # - name: Backup old env/appsettings files
      #   run: |
      #     $envFiles = Get-ChildItem -Path "${{ inputs.project-folder-path }}" -Filter "*.env" -Recurse
      #     $appsettingsFiles = Get-ChildItem -Path "${{ inputs.project-folder-path }}" -Filter "appsettings*.json" -Recurse

      #     $backupFolder = "${{ inputs.project-folder-path }}/installation-files/env-file-backup"
      #     New-Item -Path $backupFolder -ItemType Directory -Force

      #     foreach ($envFile in $envFiles) {
      #       Copy-Item -Path $envFile.FullName -Destination $backupFolder -Force
      #     }

      #     foreach ($appsettingsFile in $appsettingsFiles) {
      #       Copy-Item -Path $appsettingsFile.FullName -Destination $backupFolder -Force
      #     }

      - name: Overwrite old build/publish & docker files with new release files
        run: |
          Copy-Item -Path "${{ inputs.project-folder-path }}/releases/${{ needs.download-release.outputs.downloaded-name-job-output }}/*" -Destination "${{ inputs.project-folder-path }}/" -r -Force

      # - name: Restore old env/appsettings files
      #   run: |
      #     $backupFolder = "${{ inputs.project-folder-path }}/installation-files/env-file-backup"

      #     $envFiles = Get-ChildItem -Path $backupFolder -Filter "*.env" -Recurse
      #     $appsettingsFiles = Get-ChildItem -Path $backupFolder -Filter "appsettings*.json" -Recurse

      #     foreach ($envFile in $envFiles) {
      #       Copy-Item -Path $envFile.FullName -Destination "${{ inputs.project-folder-path }}" -Force
      #     }

      #     foreach ($appsettingsFile in $appsettingsFiles) {
      #       Copy-Item -Path $appsettingsFile.FullName -Destination "${{ inputs.project-folder-path }}" -Force
      #     }

      - name: Start new container (docker-compose up -force build)
        run: docker compose --file "${{ inputs.project-folder-path}}/installation-files/docker-files/${{ inputs.docker-compose-file-name }}" up -d --build

    #   - name: Clean up unused containers & images
    #     run: |
    #       # STEP 1: docker system prune (remove all unused containers, networks, images (both dangling and unreferenced), and optionally, volumes)
    #       docker system prune -f

    #       # STEP 2: docker image prune (remove all dangling images)
    #       docker image prune -f
