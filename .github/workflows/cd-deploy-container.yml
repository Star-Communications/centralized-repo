name: cd-deploy-container

on:
  workflow_call:
    secrets:
      AWS_ROLE_TO_ASSUME:
        description: "ARN of the AWS role to assume"
        required: true

    inputs:
      # TODO: check if runner label(s) exist in the org/repo
      runs-on:
        description: "The type of runner(s) to use (comma separated)"
        type: string
        required: true

      target-version:
        description: "Version to deploy (if not of latest)"
        type: string
        required: true

      s3-bucket:
        description: "Name of the S3 bucket to download from"
        type: string
        required: true

      s3-prefix:
        description: "Name of the S3 bucket prefix (subfolder) to upload to"
        type: string
        required: false
        default: ""

      project-folder-path:
        # eg: (C: OR /home/ubuntu)/SC-TRACKER/INSTALLATION FILES/tracker-mw
        description: "Path to the project folder (where the 'docker-files' folder is)"
        type: string
        required: true

      docker-compose-file-name:
        description: "Name of the docker-compose to use."
        type: string
        required: true

      # if path to downloaded release is "C:\actions-runner\_work\MyProj\downloads\s3\my-proj\my-proj-v0.1.29-latest",
      # then "download-release.outputs.downloaded-name" = "my-proj-v0.1.29-latest"

jobs:
  download-release:
    uses: ./.github/workflows/download-s3.yml
    with:
      runs-on: ${{ inputs.runs-on }}
      s3-bucket: ${{ inputs.s3-bucket }}
      s3-prefix: ${{ inputs.s3-prefix }}
      # <condition> && <true-value> || <false-value>
      s3-obj-filter: ${{ contains(inputs.target-version, 'latest') && ' ' || inputs.target-version }}
      download-path: "${{ inputs.project-folder-path }}/releases"
      unzip-file: true
    secrets:
      AWS_ROLE_TO_ASSUME: ${{ secrets.AWS_ROLE_TO_ASSUME }}
    # the job returns the following outputs:
    #   downloaded-name:

  deploy-container:
    needs: download-release
    runs-on: ${{ inputs.runs-on }}

    steps:
      - name: Log runner label(s) & fail if 'ubuntu-latest'
        shell: pwsh
        run: |
          echo "runs-on: ${{ inputs.runs-on }}"
          if ("${{ inputs.runs-on }}" -eq 'ubuntu-latest') {
            echo "This workflow is not intended to run on ubuntu-latest. Please use self-hosted runner label(s)."
            exit 1
          }

      - name: Log 'download-release' job output
        run: |
          echo "downloaded-name: ${{ needs.download-release.outputs.downloaded-name }}"

      # ********** Build new image & run new container **********
      #   - name: Curl backup endpoint (to service Api)
      #     run: curl -X POST https://api.scout-camp.io/backup

      - name: Stop existing container(s)
        run: docker compose --file "${{ inputs.project-folder-path}}/docker-files/${{ inputs.docker-compose-file-name }}" down
        # continue-on-error in case there is no running container
        continue-on-error: true

      - name: Overwrite old build/publish & docker files with new release files
        shell: pwsh
        run: |
          Copy-Item -Path "${{ inputs.project-folder-path }}/releases/${{ needs.download-release.outputs.downloaded-name }}/*" -Destination "${{ inputs.project-folder-path }}/" -Recurse -Force
      
      - name: Start new container (docker-compose up -force build)
        run: docker compose --file "${{ inputs.project-folder-path}}/docker-files/${{ inputs.docker-compose-file-name }}" up --build -d

    #   - name: Clean up unused containers & images
    #     run: |
    #       # STEP 1: docker system prune (remove all unused containers, networks, images (both dangling and unreferenced), and optionally, volumes)
    #       docker system prune -f

    #       # STEP 2: docker image prune (remove all dangling images)
    #       docker image prune -f
