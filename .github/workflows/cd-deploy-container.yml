name: cd-deploy-container

on:
  workflow_call:
    inputs:
      # TODO: check if runner label(s) exist in the org/repo
      runs-on:
        description: "The type of runner(s) to use (comma separated)"
        type: string
        required: true

      project-folder-path:
        description: "Name of the project (eg. 'project_name')"
        type: string
        required: true

      docker-compose-file-name:
        description: "Name of the docker-compose to use."
        type: string
        required: true

      # if path to downloaded release in "C:\actions-runner\_work\MyProj\downloads\my-proj\my-proj-v0.1.29-latest",
      # then "downloaded-release-path" = "C:\actions-runner\_work\MyProj\downloads\my-proj"
      # and "downloaded-release-folder" = "my-proj-v0.1.29-latest"
      downloaded-release-path:
        description: "Path in local machine of the downloaded release folder."
        type: string
        required: true

      downloaded-release-folder:
        description: "Name of the downloaded release folder."
        type: string
        required: true

permissions:
  id-token: write # This is required for OIDC requesting the JWT

jobs:
  deploy-container:
    runs-on: ${{ inputs.runs-on }}

    steps:
      - name: Log runner label(s) & fail if 'ubuntu-latest'
        shell: pwsh
        run: |
          echo "runs-on: ${{ inputs.runs-on }}"
          if ("${{ inputs.runs-on }}" -eq 'ubuntu-latest') {
            echo "This workflow is not intended to run on ubuntu-latest. Please use self-hosted runner label(s)."
            exit 1
          }

      # ********** Move downloaded release to project folder **********
      - name: Move downloaded release to project folder
        shell: pwsh
        run: |
          # STEP 1: Create releases folder if it doesn't exist
          if (!(Test-Path -Path "${{ inputs.project-folder-path }}/releases")) {
              New-Item -ItemType Directory -Force -Path "${{ inputs.project-folder-path }}/releases"
              echo "Release folder not found. Created new release folder."
          }

          # STEP 2: Move downloaded new release folder to project releases folder
          Move-Item -Path "${{ inputs.downloaded-release-path }}/${{ inputs.downloaded-release-folder }}" -Destination "${{ inputs.project-folder-path }}/releases/" -Force
          echo "Moved downloaded release folder to project releases folder."

      # ********** Build new image & run new container **********
      #   - name: Curl backup endpoint (to service Api)
      #     run: curl -X POST https://api.scout-camp.io/backup

      - name: Stop running container (docker-compose down)
        run: docker compose --file "${{ inputs.project-folder-path}}/docker-files/${{ inputs.docker-compose-file-name }}" down
        # continue-on-error in case there is no running container
        continue-on-error: true

      - name: Overwrite old build/publish & docker files with new release files
        shell: pwsh
        run: |
          Copy-Item -Path "${{ inputs.project-folder-path }}/releases/${{ inputs.downloaded-release-folder }}/*" -Destination "${{ inputs.project-folder-path }}/" -Recurse -Force

      - name: Start new container (docker-compose up -force build)
        run: docker compose --file "${{ inputs.project-folder-path}}/docker-files/${{ inputs.docker-compose-file-name }}" up --build

    #   - name: Clean up unused containers & images
    #     run: |
    #       # STEP 1: docker system prune (remove all unused containers, networks, images (both dangling and unreferenced), and optionally, volumes)
    #       docker system prune -f

    #       # STEP 2: docker image prune (remove all dangling images)
    #       docker image prune -f
