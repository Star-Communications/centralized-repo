version: "3.9"

networks:
  # # network 'name' must be specified here & used in both services below !!!
  # # otherwise docker will create 'nginx_MY-NETWORK-NAME' or 'nginx_default' networks
  # MY-NETWORK-NAME: # create or join existing network (with same name)
  #   name: MY-NETWORK-NAME
  #   driver: bridge
  MY-NETWORK-NAME:
    external: true

services:
  nginx:
    image: nginx:latest
    container_name: nginx
    restart: unless-stopped
    networks:
      - MY-NETWORK-NAME
    volumes:
      - ./nginx/public_html:/public_html
      - ./nginx/default.conf:/etc/nginx/conf.d/default.conf
      - ./nginx/dhparam:/etc/nginx/dhparam
      - ./nginx/logs:/var/log/nginx
      - ./certbot/conf/:/etc/nginx/ssl/
      - ./certbot/data:/usr/share/nginx/html/letsencrypt
    ports:
      - 80:80
      - 443:443
    # below: make nginx reload its configuration (& newly obtained certificates) every 6h in the background & launches nginx in the foreground.
    command: '/bin/sh -c ''while :; do sleep 6h & wait $${!}; nginx -s reload; done & nginx -g "daemon off;"'''
    # stdin_open: true # docker run -i
    # tty: true        # docker run -t

  certbot:
    image: certbot/certbot:latest
    container_name: certbot
    depends_on:
      - serviceName: nginx
        condition: service_started
    restart: unless-stopped
    networks:
      - MY-NETWORK-NAME
    volumes:
      - ./certbot/conf/:/etc/letsencrypt
      - ./certbot/logs/:/var/log/letsencrypt
      - ./certbot/data:/usr/share/nginx/html/letsencrypt
    # if "command" & "entrypoint" are both provided, docker will only run "entrypoint" and skip "command"
    # exec into container then run "command" manually to obtain certificates for your domain(s)
    command: certbot certonly --webroot --webroot-path=/usr/share/nginx/html/letsencrypt --email my-email@email.com --agree-tos --no-eff-email -d MY-WEBSITE-1.COM,MY-WEBSITE-2.COM
    # below: check if your certificate is up for renewal every 12 hours (as recommended by Letâ€™s Encrypt).
    entrypoint: "/bin/sh -c 'trap exit TERM; while :; do certbot renew; sleep 12h & wait $${!}; done;'"
    # stdin_open: true # docker run -i
    # tty: true        # docker run -t
#
# INSTRUCTIONS:
# 1) add this 'docker-compose' file to 'UTILITIES/'
# 2) create 'nginx' & 'certbot' directories in 'UTILITIES/'
# 3) add your own 'default.conf' (nginx) to 'UTILITIES/nginx/'
# 4) create docker network (if it doesn't exist yet): 'docker network create MY-NETWORK-NAME'
# 5) rename MY-NETWORK-NAME to your desired network name !!!
# 6) start container
#   a) cd into 'UTILITIES/'
#   b) run 'docker compose --file ./docker-compose.nginx-certbot.yml up -d --build'

# EXTRA NOTE:
# - whenever you update your 'default.conf' (nginx) file, restart the nginx container: 'docker restart nginx'
