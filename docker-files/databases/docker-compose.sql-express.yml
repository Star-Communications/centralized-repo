version: "3.9"

networks:
  MY-NETWORK-NAME:
    external: true

services:
  SQL-EXPRESS:
    image: mcr.microsoft.com/mssql/server:2019-latest
    container_name: SQL-EXPRESS
    restart: unless-stopped
    volumes:
      # what is this for??
      # - SQL_volume:/vol
      # persist the data in the host machine
      - ./mssql-express/data:/var/opt/mssql/data
      # persist the logs in the host machine
      - ./mssql-express/log:/var/opt/mssql/log
      # secrets store sensitive configuration (like passwords, certificates & encryption keys)
      - ./mssql-express/secrets:/var/opt/mssql/secrets
      # bind 'SC-TRACKER' to store the DB backup files there
      # '../' relative path assuming docker-compose file is in '/home/ubuntu/UTILITIES/docker-compose.yml' & '/home/ubuntu/SC-TRACKER'
      # '/app/SC-TRACKER' as this is the 'ROOT_FOLDER_PATH' defined in appsetting.Docker.json
      - ../SC-TRACKER:/app/SC-TRACKER
    ports:
      - "1433:1433"
    networks:
      - MY-NETWORK-NAME
    environment:
      - ACCEPT_EULA=Y # Accept the end user license agreement
      - MSSQL_SA_PASSWORD=SCTracker@123 # Specify the SA password
      - MSSQL_PID=Express # Specify the SQL Server edition to be express edition
#
# INSTRUCTIONS:
# 1) on host machine create directories 'UTILITIES/mssql-express/'
# 2) update directory permissions - so that docker can access the files
#   a) cd into 'UTILITIES/'
#   a) give read/write/execute permissions for all users:
#      'sudo chmod -R a+rwx .'
#   b) set groupID on the directory, so that all new files created within directory & all sub-directories will inherit the groupID
#      'sudo chmod -R g+s .'
# 3) add this 'docker-compose' file to 'UTILITIES/'
#   a) rename NETWORK to your desired network name !!!
# 4) start container
#   a) cd into 'UTILITIES/'
#   b) run 'docker compose --file ./docker-compose.sql-express.yml up -d --build'